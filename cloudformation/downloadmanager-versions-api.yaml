Parameters:
  DeployablesBucket:
    Type: String
    Description: S3 bucket that the deployable artifacts for lambda functions live in
  App:
    Type: String
    Description: Application name
  Stack:
    Type: String
    Description: Stack name
  Stage:
    Type: String
    Description: Deployment stage
    AllowedValues:
      - CODE
      - PROD
Resources:
  IAMLambdaServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
        - PolicyName: LambdaServiceRolePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                  - dynamodb:PutItem
                Effect: Allow
                Resource: !GetAtt DataTable.Arn
  IAMAPIServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: LambdaAPIServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: apigateway.amazonaws.com
          Action: sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonAPIGatewayPushToCloudWatchLogs
      Policies:
      - PolicyName: API_Service_Role_Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Action: lambda:InvokeFunction
            Resource:
            - !GetAtt APIFunction.Arn
            - !GetAtt LookupAPIFunction.Arn
            Effect: Allow
  DataTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: productName
          AttributeType: S
        - AttributeName: buildId
          AttributeType: N
      KeySchema:
        - AttributeName: productName
          KeyType: HASH
        - AttributeName: buildId
          KeyType: RANGE
      ProvisionedThroughput:
        ReadCapacityUnits: 1
        WriteCapacityUnits: 1
      Tags:
        - Key: App
          Value: !Ref App
        - Key: Stack
          Value: !Ref Stack
        - Key: Stage
          Value: !Ref Stage
  APIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Stack}-ReceiveVersion-${Stage}
      Description: Function to receive notification of a new software version
      Code:
        S3Bucket: !Ref DeployablesBucket
        S3Key: !Sub "${App}/${Stack}/${Stage}/receive-version.zip"
      Handler: receive-version
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref DataTable
      Role:
        Fn::GetAtt:
        - IAMLambdaServiceRole
        - Arn
      Timeout: 60
  LookupAPIFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${Stack}-LookupVersion-${Stage}
      Description: Function to look for existing software versions
      Code:
        S3Bucket: !Ref DeployablesBucket
        S3Key: !Sub "${App}/${Stack}/${Stage}/lookup-version.zip"
      Handler: lookup-version
      Runtime: go1.x
      MemorySize: 128
      Environment:
        Variables:
          DYNAMO_TABLE_NAME: !Ref DataTable
      Role:
        Fn::GetAtt:
          - IAMLambdaServiceRole
          - Arn
      Timeout: 60
  RestAPI:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Description: API to process new version and get version requests
      Name: Versions API
      EndpointConfiguration:
        Types:
        - REGIONAL
      Body:
        swagger: '2.0'
        info:
          description: API to process new version and get version requests
          version: 1.0.0
          title: Versions API
        schemes:
        - https
        paths:
          "/": {}
          "/lookup":
            get:
              produces:
                - application/json
                - text/plain
              responses:
                '200':
                  description: Returned data as a JSON array
                '400':
                  description: Provided data wasn't understood
                '500':
                  description: Something broke server-side
              security:
                - apikeyheader: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LookupAPIFunction}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                credentials: !GetAtt IAMAPIServiceRole.Arn
                type: aws_proxy
          "/newversion":
            post:
              produces:
              - application/json
              - application/customer-error
              - application/api_not_found
              - application/no_record
              - application/api_error
              responses:
                '200':
                  description: 200 response
                  schema:
                    "$ref": "#/definitions/Empty"
                '201':
                  description: 201 response
                '400':
                  description: Provided data wasn't understood
                '500':
                  description: Something broke server-side
              security:
              - apikeyheader: []
              x-amazon-apigateway-integration:
                responses:
                  default:
                    statusCode: '200'
                uri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${APIFunction}/invocations"
                passthroughBehavior: when_no_match
                httpMethod: POST
                contentHandling: CONVERT_TO_TEXT
                credentials: !GetAtt IAMAPIServiceRole.Arn
                type: aws_proxy
        securityDefinitions:
          apikeyheader:
            type: apiKey
            name: x-api-key
            in: header
        definitions:
          Empty:
            type: object
            title: Empty Schema
  UpdateLambdaPermissions:
    Type: AWS::Lambda::Permission
    DependsOn:
    - APIFunction
    Properties:
      Action: lambda:Invoke
      FunctionName:
        Ref: APIFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/POST/newversion"
  LookupLambdaPermissions:
    Type: AWS::Lambda::Permission
    DependsOn:
      - LookupAPIFunction
    Properties:
      Action: lambda:Invoke
      FunctionName:
        Ref: APIFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:/*/GET/lookup"
  APIFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    DependsOn: APIFunction
    Properties:
      LogGroupName: !Sub "/aws/lambda/${APIFunction}"
  ApiGatewayCloudWatchLogsRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
          Action:
          - sts:AssumeRole
      Policies:
      - PolicyName: API_GW_Logs_Policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:DescribeLogGroups
            - logs:DescribeLogStreams
            - logs:PutLogEvents
            - logs:GetLogEvents
            - logs:FilterLogEvents
            Resource: "*"
  ApiGatewayAccount:
    Type: AWS::ApiGateway::Account
    Properties:
      CloudWatchRoleArn:
        Fn::GetAtt:
        - ApiGatewayCloudWatchLogsRole
        - Arn
  RestAPIStage:
    Type: AWS::ApiGateway::Stage
    DependsOn:
    - ApiGatewayAccount
    Properties:
      DeploymentId: !Ref RestAPIDeployment
      MethodSettings:
      - DataTraceEnabled: true
        HttpMethod: "*"
        LoggingLevel: INFO
        ResourcePath: "/*"
      RestApiId:
        Ref: RestAPI
      StageName: dev
  RestAPIDeployment:
    Type: AWS::ApiGateway::Deployment
    DependsOn:
    - RestAPI
    Properties:
      RestApiId: !Ref RestAPI
      StageName: !Ref Stage

